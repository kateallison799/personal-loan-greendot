'use strict';(function(d){d.utilities={isInViewport:function(a,b){let c=(b=b||!1)?$(window).scrollTop():$(window).scrollTop()-200;b=b?c+$(window).height():c+$(window).height()+300;let e=a.offset().top;a=e+a.outerHeight();return 0!==e&&a>c&&e<b},loadScript:function(a,b){const c=document.createElement("script");c.src=a;c.type="text/javascript";document.head.appendChild(c);"function"===typeof b&&(c.onload=b)},isInternetExplorer:function(){let a=window.navigator.userAgent;return-1<a.indexOf("MSIE ")||
-1<a.indexOf("Trident/")},callOnLoad:function(a){/complete|interactive|loaded/.test(document.readyState)?a():window.addEventListener("load",a,!1)},formatWindowURL:function(){if(window.location.hash){let a=window.location.hash.split("?");a[1]&&(window.location.hash=a[0],window.location.search=a[1])}}}})(window.GDOT||(window.GDOT={}));
let sNoise="vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n    vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n    vec3 permute(vec3 x) { return mod289(((x * 34.0) + 1.0) * x); }\n\n    float snoise(vec2 v) {\n        const vec4 C \x3d vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n            0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n            -0.577350269189626,  // -1.0 + 2.0 * C.x\n            0.024390243902439); // 1.0 / 41.0\n        vec2 i \x3d floor(v + dot(v, C.yy));\n        vec2 x0 \x3d v - i + dot(i, C.xx);\n        vec2 i1;\n        i1 \x3d (x0.x \x3e x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n        vec4 x12 \x3d x0.xyxy + C.xxzz;\n        x12.xy -\x3d i1;\n        i \x3d mod289(i); // Avoid truncation effects in permutation\n        vec3 p \x3d permute(permute(i.y + vec3(0.0, i1.y, 1.0))\n            + i.x + vec3(0.0, i1.x, 1.0));\n\n        vec3 m \x3d max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0);\n        m \x3d m * m;\n        m \x3d m * m;\n        vec3 x \x3d 2.0 * fract(p * C.www) - 1.0;\n        vec3 h \x3d abs(x) - 0.5;\n        vec3 ox \x3d floor(x + 0.5);\n        vec3 a0 \x3d x - ox;\n        m *\x3d 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);\n        vec3 g;\n        g.x \x3d a0.x * x0.x + h.x * x0.y;\n        g.yz \x3d a0.yz * x12.xz + h.yz * x12.yw;\n        return 130.0 * dot(m, g);\n    }",fragmentShaderValue=
"vec3 rgb(float r, float g, float b) {\n                return vec3(r / 255., g / 255., b / 255.);\n            }\n\n            vec3 rgb(float c) {\n                return vec3(c / 255., c / 255., c / 255.);\n            }\n\n            uniform vec3 u_bg;\n            uniform vec3 u_bgMain;\n            uniform vec3 u_color1;\n            uniform vec3 u_color2;\n            uniform float u_time;\n\n            varying vec2 vUv;\n            varying float vDistortion;\n\n            void main() {\n                vec3 bg \x3d rgb(u_bg.r, u_bg.g, u_bg.b);\n                vec3 c1 \x3d rgb(u_color1.r, u_color1.g, u_color1.b);\n                vec3 c2 \x3d rgb(u_color2.r, u_color2.g, u_color2.b);\n                vec3 bgMain \x3d rgb(u_bgMain.r, u_bgMain.g, u_bgMain.b);\n\n                float noise1 \x3d snoise(vUv + u_time * 0.08);\n                float noise2 \x3d snoise(vUv * 2. + u_time * 0.1);\n\n                vec3 color \x3d bg;\n                color \x3d mix(color, c1, noise1 * 0.6);\n                color \x3d mix(color, c2, noise2 * .4);\n\n                color \x3d mix(color, mix(c1, c2, vUv.x), vDistortion);\n\n                float border \x3d smoothstep(0.1, 0.6, vUv.x);\n\n                color \x3d mix(color, bgMain, 1. -border);\n\n                gl_FragColor \x3d vec4(color, 1.0);\n            }",
vertexShaderValue="uniform float u_time;\n            uniform vec2 u_randomisePosition;\n\n            varying float vDistortion;\n            varying float xDistortion;\n            varying vec2 vUv;\n\n            void main() {\n                vUv \x3d uv;\n                vDistortion \x3d snoise(vUv.xx * 3. - u_randomisePosition * 0.15);\n                xDistortion \x3d snoise(vUv.yy * 1. - u_randomisePosition * 0.05);\n                vec3 pos \x3d position;\n                pos.z +\x3d (vDistortion * 35.);\n                pos.x +\x3d (xDistortion * 25.);\n\n                gl_Position \x3d projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n            }";
function randomInteger(d,a){return Math.floor(Math.random()*(a-d+1))+d}function rgb(d,a,b){return new THREE.Vector3(d,a,b)}
document.addEventListener("DOMContentLoaded",function(d){const a=new THREE.WebGLRenderer;a.setSize(window.outerWidth+100,window.outerHeight+100);$(".bkg-gradient").prepend(a.domElement);const b=new THREE.Scene,c=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1E3);let e=!1;c.position.z=5;var l=new THREE.Vector2(1,2);d=new THREE.PlaneGeometry(window.innerWidth/2,400,100,100);l=new THREE.ShaderMaterial({uniforms:{u_bg:{type:"v3",value:rgb(189,255,129)},u_bgMain:{type:"v3",value:rgb(189,
255,129)},u_color1:{type:"v3",value:rgb(189,255,129)},u_color2:{type:"v3",value:rgb(73,214,0)},u_time:{type:"f",value:30},u_randomisePosition:{type:"v2",value:l}},fragmentShader:sNoise+fragmentShaderValue,vertexShader:sNoise+vertexShaderValue});let g=new THREE.Mesh(d,l);g.position.set(-200,270,-280);g.scale.multiplyScalar(4);g.rotationX=-1;g.rotationY=0;g.rotationZ=.1;b.add(g);a.render(b,c);let h=0,m=0,f=randomInteger(0,32),k=randomInteger(0,32);const n=function(){requestAnimationFrame(n);a.render(b,
c);g.material.uniforms.u_randomisePosition.value=new THREE.Vector2(m,m);var p=h/2;g.material.uniforms.u_color1.value=new THREE.Vector3(Math.floor(192+64*Math.cos((f*f-k*k)/300+h/2)),Math.floor(192+64*Math.sin((f*f*Math.cos(p/4)+k*k*Math.sin(p/3))/300)),Math.floor(192+64*Math.sin(5*Math.sin(h/2/9)+((f-100)*(f-100)+(k-100)*(k-100))/1100)));g.material.uniforms.u_time.value=h;0==h%.1&&(0==e?(--f,0>=f&&(e=!0)):(f+=1,32<=f&&(e=!1)));m+=.01;h+=.05};n()});
$(document).ready(function(){function d(){b=$('.image-2x:not(".img-updated"), .image-3x:not(".img-updated")');b.each(function(){let c=$(this);GDOT.utilities.isInViewport(c,!0)&&setTimeout(function(){let e=new Image;e.src=c.find("img").attr("src");0<e.width&&(a=c.hasClass("image-2x")?2:3,c.find(".cmp-image").css({"max-width":e.width/a,margin:"auto"}),c.addClass("img-updated"))},10)})}let a=2,b=$(".image-2x, .image-3x");b.length&&(d(),$(window).on("scroll",d))});